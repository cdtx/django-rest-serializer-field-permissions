{"name":"Django-rest-serializer-field-permissions","tagline":"Field-by-field serializer permissions for Django Rest Framework.","body":"[![Build Status](https://travis-ci.org/InterSIS/django-rest-serializer-field-permissions.svg?branch=master)](https://travis-ci.org/InterSIS/django-rest-serializer-field-permissions)\r\n[![Code Climate](https://codeclimate.com/github/InterSIS/django-rest-serializer-field-permissions/badges/gpa.svg)](https://codeclimate.com/github/InterSIS/django-rest-serializer-field-permissions)\r\n[![Coverage Status](https://coveralls.io/repos/InterSIS/django-rest-serializer-field-permissions/badge.svg?branch=master&service=github)](https://coveralls.io/github/InterSIS/django-rest-serializer-field-permissions?branch=master)\r\n[![PyPI version](https://badge.fury.io/py/django-rest-serializer-field-permissions.svg)](http://badge.fury.io/py/django-rest-serializer-field-permissions)\r\n\r\ndjango-rest-serializer-field-permissions\r\n=============\r\n\r\nAdd field-by-field permission classes to your serializer fields that look like this:\r\n\r\n```\r\n  class PersonSerializer(FieldPermissionSerializerMixin, LookupModelSerializer):\r\n\r\n      // Only allow authenticated users to retrieve family and given names\r\n      family_names = serializers.CharField(permission_classes=(IsAuthenticated(), ))\r\n      given_names = serializers.CharField(permission_classes=(IsAuthenticated(), ))\r\n      \r\n      // Allow all users to retrieve nick name\r\n      nick_name = serializers.CharField(permission_classes=(AllowAll(), ))\r\n\r\n```\r\n\r\nDefine your own permission classes as a function of any request variable.\r\n\r\nInstallation\r\n===============\r\n\r\nInstall the module in your Python distribution or virtualenv:\r\n\r\n    $ pip install django-rest-serializer-field-permissions\r\n\r\nAdd the application to your `INSTALLED_APPS`:\r\n\r\n```\r\n  INSTALLED_APPS = (\r\n  ...\r\n  \"rest_framework_serializer_field_permissions\",\r\n  ...\r\n  )\r\n```\r\n\r\nUse\r\n===\r\n\r\nIn your serializers, mix `FieldPermissionSerializerMixin` into your serializer classes, as the left-most parent. The fields\r\nprovided by `rest_framework_serializer_field_permissions.fields` accept `permission_classes` which operate in typical\r\nDRF fashion:\r\n```\r\n  from rest_framework import serializers\r\n  \r\n  from rest_framework_serializer_field_permissions import fields\r\n  from rest_framework_serializer_field_permissions.serializers import FieldPermissionSerializerMixin\r\n  from rest_framework_serializer_field_permissions.permissions import IsAuthenticated\r\n\r\n  class PersonSerializer(FieldPermissionSerializerMixin, serializers.ModelSerializer):\r\n\r\n      family_names = fields.CharField(permission_classes=(IsAuthenticated(), ))\r\n      given_names = fields.CharField(permission_classes=(IsAuthenticated(), ))\r\n\r\n```\r\n\r\nAny pagination-capable viewset with which you wish to include permission-capable fields must use the\r\n`ContextPassingPaginationSerializer` provided by `rest_framework_serializer_field_permissions.serializers`.\r\n```\r\n  from rest_framework import viewsets\r\n  \r\n  from rest_framework_serializer_field_permissions.serializers import FieldPermissionSerializerMixin\r\n  \r\n\r\n  class MyViewset(viewsets.GenericViewSet):\r\n      pagination_serializer_class = ContextPassingPaginationSerializer\r\n```\r\n\r\nThe `FieldPermissionSerializerMixin` may be mixed with any DRF serializer class, not just `ModelSerializer`. Similarly,\r\nthe `ContextPassingPaginationSerializer` may be used with any pagination-capable viewset, not just `GenericViewSet`.\r\n\r\nYou can write your own permission classes by sub-classing `BaseFieldPermission` in `permissions.py`.\r\n\r\nHow it Works\r\n============\r\n\r\nThe `FieldPermissionSerializerMixin` provides its own `fields` property, which DRF serializers call to get a list\r\nof their own fields. The amended `fields` property checks for permission-bearing fields, forces them to check their\r\npermissions against the request, and scrubs from the return any fields which fail their permission checks.\r\n\r\nCompatibility\r\n=============\r\n\r\n* Django Rest Framework 3.0\r\n* Django 1.6, 1.7, 1.8\r\n* Python 2.7, 3.3, 3.4\r\n\r\nSee tox.ini for specific minor versions tested.\r\n\r\nAdditional Requirements\r\n=======================\r\n\r\nNone\r\n\r\nTodo\r\n====\r\n\r\n* Serializer tests\r\n* Integration tests\r\n\r\nGetting Involved\r\n================\r\n\r\nFeel free to open pull requests or issues. GitHub is the canonical location of this project.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}